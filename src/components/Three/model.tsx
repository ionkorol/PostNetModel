/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useCallback, useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import * as posenet from "@tensorflow-models/posenet";
import { FormatedPartProp, FormatedPoseProp } from "../../utils/interface";
import KalmanSmoothing from "../../lib/KalmanSmoothing";

const CONFIDENCE = 0.3;

const Model = (props: {
  groupProps?: JSX.IntrinsicElements["group"];
  poses: FormatedPoseProp[];
}) => {
  const group = useRef();
  let currentPositions: FormatedPoseProp[] = [];

  const { nodes, materials, scene } = useGLTF("./model3.glb") as any;

  useFrame(
    useCallback(
      (state, delta) => {
        // console.log(props.poses);
        // console.log(nodes);

        let localPoses = [...props.poses];
        const bestPose = localPoses.sort((a, b) => b.SCORE - a.SCORE)[0];
        if (!bestPose) {
          return;
        }

        if (currentPositions.length < 5) {
          currentPositions = [...currentPositions, bestPose];
        } else {
          currentPositions = [...currentPositions.slice(1), bestPose];
        }

        const kalmanPose = KalmanSmoothing(currentPositions);

        const poseInUse = kalmanPose;
        console.log(poseInUse.LEFT_WRIST.x);

        // Left arm & elbow
        nodes.Ch31_Body.skeleton.bones[7].rotation.y = getAngle(
          poseInUse.LEFT_SHOULDER,
          poseInUse.LEFT_ELBOW,
          0,
          0,
          -1
        );
        nodes.Ch31_Body.skeleton.bones[9].rotation.x = getAngle(
          poseInUse.LEFT_ELBOW,
          poseInUse.LEFT_WRIST,
          0,
          0,
          -1
        );

        // Right arm & elbow
        nodes.Ch31_Body.skeleton.bones[31].rotation.y = getAngle(
          poseInUse.RIGHT_ELBOW,
          poseInUse.RIGHT_SHOULDER,
          0,
          0,
          -1
        );
        nodes.Ch31_Body.skeleton.bones[33].rotation.x = getAngle(
          poseInUse.RIGHT_WRIST,
          poseInUse.RIGHT_ELBOW,
          0,
          0,
          -1
        );

        // Left leg & knee
        nodes.Ch31_Body.skeleton.bones[55].rotation.z = getAngle(
          poseInUse.LEFT_HIP,
          poseInUse.LEFT_KNEE,
          Math.PI / 2,
          Math.PI,
          -1
        );
        nodes.Ch31_Body.skeleton.bones[56].rotation.z = getAngle(
          poseInUse.LEFT_KNEE,
          poseInUse.LEFT_ANKLE,
          Math.PI / 2,
          0,
          -1
        );

        // Right leg & knee
        nodes.Ch31_Body.skeleton.bones[60].rotation.z = getAngle(
          poseInUse.RIGHT_HIP,
          poseInUse.RIGHT_KNEE,
          Math.PI / 2,
          Math.PI,
          -1
        );
        nodes.Ch31_Body.skeleton.bones[61].rotation.z = getAngle(
          poseInUse.RIGHT_KNEE,
          poseInUse.RIGHT_ANKLE,
          Math.PI / 2,
          0,
          -1
        );

        // Head
        nodes.Ch31_Body.skeleton.bones[5].rotation.y = getYRotation(
          poseInUse.LEFT_EYE,
          poseInUse.RIGHT_EYE,
          poseInUse.NOSE
        );
        nodes.Ch31_Body.skeleton.bones[3].rotation.z = getZRotation(
          poseInUse.LEFT_EYE,
          poseInUse.RIGHT_EYE
        );
      },
      [props.poses]
    )
  );

  return (
    <mesh position={[0, -1, 0]}>
      <group ref={group} {...props.groupProps} dispose={null}>
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorig9Hips} />
          <skinnedMesh
            geometry={nodes.Ch31_Body.geometry}
            material={nodes.Ch31_Body.material}
            skeleton={nodes.Ch31_Body.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Ch31_Collar.geometry}
            material={nodes.Ch31_Collar.material}
            skeleton={nodes.Ch31_Collar.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Ch31_Eyelashes.geometry}
            material={nodes.Ch31_Eyelashes.material}
            skeleton={nodes.Ch31_Eyelashes.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Ch31_Hair.geometry}
            material={nodes.Ch31_Hair.material}
            skeleton={nodes.Ch31_Hair.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Ch31_Pants.geometry}
            material={nodes.Ch31_Pants.material}
            skeleton={nodes.Ch31_Pants.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Ch31_Shoes.geometry}
            material={nodes.Ch31_Shoes.material}
            skeleton={nodes.Ch31_Shoes.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Ch31_Sweater.geometry}
            material={nodes.Ch31_Sweater.material}
            skeleton={nodes.Ch31_Sweater.skeleton}
          />
        </group>
      </group>
    </mesh>
  );
};

useGLTF.preload("./model3.glb");

export default Model;

const getAngle = (
  p1: FormatedPartProp,
  p2: FormatedPartProp,
  c1: number,
  c2: number,
  m: number
) => {
  if (p1.score > CONFIDENCE && p2.score > CONFIDENCE) {
    return (Math.atan2(p2.y - p1.y, p2.x - p1.x) + c1) * m;
  }
  return c2 * m;
};

const normalize = (min: number, max: number, val: number) => {
  return ((val - min) / (max - min)) * Math.PI;
};

const getYRotation = (
  p1: FormatedPartProp,
  p2: FormatedPartProp,
  p3: FormatedPartProp
) => {
  if (p1.score > CONFIDENCE && p2.score > CONFIDENCE && p3.score > CONFIDENCE) {
    let e1 = Math.abs(p1.x - p3.x);
    let e2 = Math.abs(p2.x - p3.x);
    return normalize(-100, 100, e2 - e1) - Math.PI / 2;
  }
  return 0;
};

const getZRotation = (p1: FormatedPartProp, p2: FormatedPartProp) => {
  if (p1.score > CONFIDENCE && p2.score > CONFIDENCE) {
    let e1 = Math.abs(p1.y);
    let e2 = Math.abs(p2.y);
    return normalize(-80, 80, e2 - e1) - Math.PI / 2;
  }
  return 0;
};
